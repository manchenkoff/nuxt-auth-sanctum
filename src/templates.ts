import { addTypeTemplate, type Resolver } from '@nuxt/kit'
import { relative, resolve } from 'pathe'

export const registerTypeTemplates = (resolver: Resolver) => {
  addTypeTemplate({
    filename: 'types/sanctum.d.ts',
    getContents: ({ nuxt }) => {
      const { buildDir } = nuxt.options
      const getRelativePath = (path: string) => relative(resolve(buildDir, './types'), resolver.resolve(path))
      return `// Generated by nuxt-auth-sanctum module
import type { NuxtApp } from '#app'
import type { HookResult } from '@nuxt/schema'
import type { FetchContext } from 'ofetch'
import type { ConsolaInstance } from 'consola'
import type { SanctumAppConfig } from '${getRelativePath('./runtime/types/config.ts')}';
import type { SanctumGlobalMiddlewarePageMeta } from '${getRelativePath('./runtime/types/meta.ts')}';

declare module 'nuxt/schema' {
  interface AppConfig {
    sanctum?: SanctumAppConfig
  }
  interface AppConfigInput {
    sanctum?: SanctumAppConfig
  }
}

declare module '@nuxt/schema' {
  interface AppConfig {
    sanctum?: SanctumAppConfig
  }
  interface AppConfigInput {
    sanctum?: SanctumAppConfig
  }
}

declare module '#app' {
  interface PageMeta {
    /**
     * Sanctum global middleware page configuration.
     */
    sanctum?: Partial<SanctumGlobalMiddlewarePageMeta>
  }

  interface RuntimeNuxtHooks {
    /**
     * Triggers when receiving an error response.
     */
    'sanctum:error:response': (context: FetchContext) => HookResult
    /**
     * Triggers when receiving an error on fetch request.
     */
    'sanctum:error:request': (context: FetchContext) => HookResult
    /**
     * Triggers when the user has been redirected.
     */
    'sanctum:redirect': (path: string) => HookResult
    /**
     * Triggers when an initial user identity request has been made.
     */
    'sanctum:init': () => HookResult
    /**
     * Triggers when user identity has been refreshed.
     */
    'sanctum:refresh': () => HookResult
    /**
     * Triggers when user successfully logs in.
     */
    'sanctum:login': () => HookResult
    /**
     * Triggers when user successfully logs out.
     */
    'sanctum:logout': () => HookResult
    /**
     * Triggers on every client request.
     */
    'sanctum:request': (app: NuxtApp, ctx: FetchContext, logger: ConsolaInstance) => HookResult
    /**
     * Triggers on every server response.
     */
    'sanctum:response': (app: NuxtApp, ctx: FetchContext, logger: ConsolaInstance) => HookResult
  }
}

export {}`
    },
  })
}
